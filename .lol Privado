local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = ".lol" .. Fluent.Version,
    SubTitle = "Privado Premium",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

-- Fluent provides Lucide Icons, they are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Lock", Icon = "" }),
}


LockTab:AddButton({
    Title = "Cam Lock",
    Description = "Auto Air On Key.Q",
    Callback = function()
        getgenv().Mist = {
            ["Main"] = {
                ["Prediction"] = 0.1666279438888,
                ["AutoPrediction"] = false,-- // 100 ping
                ["AimPart"] = "HumanoidRootPart",
                ["ToggleKey"] = "q" -- // FOR PC
            },
            ["Misc"] = {
                ["AutoAir"] = true,
                ["AntiGroundShots"] = true -- // keep this true for better experience
            }
        }
        
        loadstring(game:HttpGet("https://raw.githubusercontent.com/4r8z/Mist.lol/refs/heads/main/MistCamlockOP", true))()
    end
})

LockTab:AddButton({
    Title = "Silent Aim",
    Description = "Fov On | No Key",
    Callback = function()
        --// Script Config \\--
getrenv().Script = {
    --// Settings \\--
    Settings = {
        --// Silent-Aim - Settings \\--
        SilentAim = {
            Enabled = true,
            AimPart = "ClosestPart", --// Advanced: ClosestPart, RootPart (HumanoidRootPart) \\--
            HitChance = 100,
            Method = "Remote Hook", --// Remote Hook, Mouse Hook, Remote Fire \\--
            
            --// 
            Targeting = {
                Method = "Normal", --// Normal, Closest, Furthest \\--
                Distance = {
                    Minimum = 0,
                    Maximum = math.huge,
                },
            },
            
            Prediction = {
                Enabled = true,
                Method = "Multiplication", --// Multiplication, Division \\--
                
                Multiplication = {
                    Horizontal = 0.134,
                    Vertical = 0.134,
                },
                
                Division = {
                    Horizontal = 6.5,
                    Vertical = 10,
                },
                
                Automatic = {
                    Enabled = true,
                    
                    Horizontal = {
                        Add = 0.134,
                        Multiply = 0.134,
                        Divide = 160,
                    },
                    
                    Vertical = {
                        Add = 0.134,
                        Multiply = 0.134,
                        Divide = 320,
                    },
                },
                
            },
            
        },
        
        --// Triggerbot - Settings \\--
        Triggerbot = {
            Enabled = false,
            ActivationDelay = 0.25,
        },
        
        --// Checks - Settings \\--
        Checks = {
            Wall = true,
            Knocked = true,
            Death = true,
            Grabbed = true,
            Friend = false,
            Crew = true,
            ForceField = true,
        },
        
        --// Velocity - Settings \\--
        Velocity = {
            Type = "Velocity", --// Velocity, AssemblyLinearVelocity \\--
            
            Minimum = {
                X = -math.huge,
                Y = -math.huge,
                Z = -math.huge,
            },
            
            Maximum = {
                X = math.huge,
                Y = math.huge,
                Z = math.huge,
            },
        },
        
        --// Offsets Settings \\--
        Offsets = {
            Enabled = false,
            Jumping = 0,
            Falling = 0,
        },
        
        --// Resolver - Settings \\--
        Resolver = {
            Enabled = false,
            Method = "Recalculate Velocity", --// Recalculate Velocity, Move Direction, Move Velocity \\--
            Smoothness = {
                Enabled = false,
                Value = 0.15,
            },
        },
        
        --// Circle - Settings \\--
        Circle = {
            Visible = true,
            Transparency = 1,
            Color = Color3.fromRGB(255, 255, 255),
            Radius = 250,
            Position = "Crosshair", --// Crosshair, Center, Finger, Mouse \\--
            
            --// Circle Gradient Settings \\--
            Gradient = {
                Enabled = true,
                Rotation = 0,
                
                Colors = {
                    One = Color3.fromRGB(255, 255, 255),
                    Two = Color3.fromRGB(0, 0, 0),
                },
                
                --// Circle Gradient Animation Settings \\--
                Animation = {
                    Enabled = false,
                    Speed = 1,
                    Offset = Vector2.new(0, 0),
                },
            },
            
            --// Circle Stroke Settings \\--
            Stroke = {
                Visible = true,
                Transparency = 0,
                Thickness = 2.5,
                Color = Color3.fromRGB(255, 255, 255),
                
                --// Circle Stroke Gradient Settings \\--
                Gradient = {
                    Enabled = true,
                    Rotation = 0,
                    
                    Colors = {
                        One = Color3.fromRGB(255, 255, 255),
                        Two = Color3.fromRGB(0, 0, 0),
                    },
                    
                    --// Circle Stroke Gradient Animation Settings \\--
                    Animation = {
                        Enabled = true,
                        Speed = 1,
                        Offset = Vector2.new(0, 0),
                    },
                },
                
            },
        },
    },
}

-- Dahood Silent-Aim [NEW]
loadstring(Game:HttpGet("https://raw.githubusercontent.com/TheRealXORA/Roblox/refs/heads/Main/Scripts%20/Dahood%20Silent-Aim.lua", true))()
    end
})

LockTab:AddButton({
    Title = "Resolver",
    Description = "Pc",
    Callback = function()
        local previousPosition = nil
        local previousTime = nil
    
        local function NewVelocity(object)
            local currentPosition = object.Position
            local currentTime = tick()
    
            if previousPosition and previousTime then
                local deltaTime = currentTime - previousTime
                local velocity = (currentPosition - previousPosition) / deltaTime
    
                object.Velocity = velocity
            end
    
            previousPosition = currentPosition
            previousTime = currentTime
        end
    
        RunService.Heartbeat:Connect(function()
            if Target and Target.Character and Target.Character:FindFirstChild(IHateNiggers.Silent.AimPart).Velocity.magnitude > IHateNiggers.Resolving.Velocity then
                NewVelocity(Target.Character[IHateNiggers.Silent.AimPart])
            end
        end)
    end
})

LockTab:AddButton({
    Title = "Hitbox",
    Description = "Ctrl+E To increase hitbox | V To hide Hitbox",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/realbullett/legacy/refs/heads/main/PrettyMuchThePrettySoftwareFlux'))()
    end
})

local Section = Tab:AddSection("Visual")

LockTab:AddButton({
    Title = "WallHack",
    Description = "Esp",
    Callback = function()
        local FillColor = Color3.fromRGB(175,25,255)
local DepthMode = "AlwaysOnTop"
local FillTransparency = 0.5
local OutlineColor = Color3.fromRGB(255,255,255)
local OutlineTransparency = 0

local CoreGui = game:FindService("CoreGui")
local Players = game:FindService("Players")
local lp = Players.LocalPlayer
local connections = {}

local Storage = Instance.new("Folder")
Storage.Parent = CoreGui
Storage.Name = "Highlight_Storage"

local function Highlight(plr)
    local Highlight = Instance.new("Highlight")
    Highlight.Name = plr.Name
    Highlight.FillColor = FillColor
    Highlight.DepthMode = DepthMode
    Highlight.FillTransparency = FillTransparency
    Highlight.OutlineColor = OutlineColor
    Highlight.OutlineTransparency = 0
    Highlight.Parent = Storage
    
    local plrchar = plr.Character
    if plrchar then
        Highlight.Adornee = plrchar
    end

    connections[plr] = plr.CharacterAdded:Connect(function(char)
        Highlight.Adornee = char
    end)
end

Players.PlayerAdded:Connect(Highlight)
for i,v in next, Players:GetPlayers() do
    Highlight(v)
end

Players.PlayerRemoving:Connect(function(plr)
    local plrname = plr.Name
    if Storage[plrname] then
        Storage[plrname]:Destroy()
    end
    if connections[plr] then
        connections[plr]:Disconnect()
    end
end)
    end
})

local Section = Tab:AddSection("Misc")

LockTab:AddButton({
    Title = "Fps Booster",
    Description = "pc",
    Callback = function()
        _G.UwpOptimize = {
            Players = {
                ["Ignore Me"] = true, -- Ignore your Character
                ["Ignore Others"] = true-- Ignore other Characters
            },
            Meshes = {
                Destroy = false, -- Destroy Meshes
                LowDetail = true, -- Low detail meshes (NOT SURE IT DOES ANYTHING)
            },
            Images = {
                Invisible = true, -- Invisible Images
                LowDetail = true, -- Low detail images (NOT SURE IT DOES ANYTHING)
                Destroy = false, -- Destroy Images
            },
            ["No Particles"] = true, -- Disables all ParticleEmitter, Trail, Smoke, Fire and Sparkles
            ["No Camera Effects"] = true, -- Disables all PostEffect's (Camera/Lighting Effects)
            ["No Explosions"] = true, -- Makes Explosion's invisible
            ["No Clothes"] = false, -- Removes Clothing from the game
            ["Low Water Graphics"] = true, -- Removes Water Quality
            ["No Shadows"] = false, -- Remove Shadows
            ["Low Rendering"] = true, -- Lower Rendering
            ["Low Quality Parts"] = false, -- Lower quality parts
        }
        
        
        if not _G.Ignore then
            _G.Ignore = {} -- Add Instances to this table to ignore them (e.g. _G.Ignore = {workspace.Map, workspace.Map2})
        end
        if not _G.WaitPerAmount then
            _G.WaitPerAmount = 500 -- Set Higher or Lower depending on your computer's performance
        end
        if _G.SendNotifications == nil then
            _G.SendNotifications = false -- Set to false if you don't want notifications
        end
        if _G.ConsoleLogs == nil then
            _G.ConsoleLogs = false -- Set to true if you want console logs (mainly for debugging)
        end
        
        
        
        if not game:IsLoaded() then
            repeat
                task.wait()
            until game:IsLoaded()
        end
        if not _G.UwpOptimize then
            _G.UwpOptimize = {
                Players = {
                    ["Ignore Me"] = true,
                    ["Ignore Others"] = true,
                    ["Ignore Tools"] = true
                },
                Meshes = {
                    NoMesh = false,
                    NoTexture = false,
                    Destroy = false
                },
                Images = {
                    Invisible = true,
                    Destroy = false
                },
                Explosions = {
                    Smaller = true,
                    Invisible = false, -- Not recommended for PVP games
                    Destroy = false -- Not recommended for PVP games
                },
                Particles = {
                    Invisible = true,
                    Destroy = true
                },
                TextLabels = {
                    LowerQuality = true,
                    Invisible = true,
                    Destroy = false
                },
                MeshParts = {
                    LowerQuality = true,
                    Invisible = true,
                    NoTexture = false,
                    NoMesh = false,
                    Destroy = false
                },
                Other = {
                    ["FPS Cap"] = 999, -- Set this true to uncap FPS
                    ["No Camera Effects"] = true,
                    ["No Clothes"] = true,
                    ["Low Water Graphics"] = true,
                    ["No Shadows"] = true,
                    ["Low Rendering"] = true,
                    ["Low Quality Parts"] = true,
                    ["Low Quality Models"] = true,
                    ["Reset Materials"] = true,
                    ["Lower Quality MeshParts"] = true
                }
            }
        end
        local Players, Lighting, StarterGui, MaterialService = game:GetService("Players"), game:GetService("Lighting"), game:GetService("StarterGui"), game:GetService("MaterialService")
        local ME, CanBeEnabled = Players.LocalPlayer, {"ParticleEmitter", "Trail", "Smoke", "Fire", "Sparkles"}
        local function PartOfCharacter(Instance)
            for i, v in pairs(Players:GetPlayers()) do
                if v ~= ME and v.Character and Instance:IsDescendantOf(v.Character) then
                    return true
                end
            end
            return false
        end
        local function DescendantOfIgnore(Instance)
            for i, v in pairs(_G.Ignore) do
                if Instance:IsDescendantOf(v) then
                    return true
                end
            end
            return false
        end
        local function CheckIfBad(Instance)
            if not Instance:IsDescendantOf(Players) and (_G.UwpOptimize.Players["Ignore Others"] and not PartOfCharacter(Instance) or not _G.UwpOptimize.Players["Ignore Others"]) and (_G.UwpOptimize.Players["Ignore Me"] and ME.Character and not Instance:IsDescendantOf(ME.Character) or not _G.UwpOptimize.Players["Ignore Me"]) and (_G.UwpOptimize.Players["Ignore Tools"] and not Instance:IsA("BackpackItem") and not Instance:FindFirstAncestorWhichIsA("BackpackItem") or not _G.UwpOptimize.Players["Ignore Tools"])--[[not PartOfCharacter(Instance)]] and (_G.Ignore and not table.find(_G.Ignore, Instance) and not DescendantOfIgnore(Instance) or (not _G.Ignore or type(_G.Ignore) ~= "table" or #_G.Ignore <= 0)) then
                if Instance:IsA("DataModelMesh") then
                    if _G.UwpOptimize.Meshes.NoMesh and Instance:IsA("SpecialMesh") then
                        Instance.MeshId = ""
                    end
                    if _G.UwpOptimize.Meshes.NoTexture and Instance:IsA("SpecialMesh") then
                        Instance.TextureId = ""
                    end
                    if _G.UwpOptimize.Meshes.Destroy or _G.UwpOptimize["No Meshes"] then
                        Instance:Destroy()
                    end
                elseif Instance:IsA("FaceInstance") then
                    if _G.UwpOptimize.Images.Invisible then
                        Instance.Transparency = 1
                        Instance.Shiny = 1
                    end
                    if _G.UwpOptimize.Images.LowDetail then
                        Instance.Shiny = 1
                    end
                    if _G.UwpOptimize.Images.Destroy then
                        Instance:Destroy()
                    end
                elseif Instance:IsA("ShirtGraphic") then
                    if _G.UwpOptimize.Images.Invisible then
                        Instance.Graphic = ""
                    end
                    if _G.UwpOptimize.Images.Destroy then
                        Instance:Destroy()
                    end
                elseif table.find(CanBeEnabled, Instance.ClassName) then
                    if _G.UwpOptimize["Invisible Particles"] or _G.UwpOptimize["No Particles"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Invisible Particles"]) or (_G.UwpOptimize.Particles and _G.UwpOptimize.Particles.Invisible) then
                        Instance.Enabled = false
                    end
                    if (_G.UwpOptimize.Other and _G.UwpOptimize.Other["No Particles"]) or (_G.UwpOptimize.Particles and _G.UwpOptimize.Particles.Destroy) then
                        Instance:Destroy()
                    end
                elseif Instance:IsA("PostEffect") and (_G.UwpOptimize["No Camera Effects"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["No Camera Effects"])) then
                    Instance.Enabled = false
                elseif Instance:IsA("Explosion") then
                    if _G.UwpOptimize["Smaller Explosions"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Smaller Explosions"]) or (_G.UwpOptimize.Explosions and _G.UwpOptimize.Explosions.Smaller) then
                        Instance.BlastPressure = 1
                        Instance.BlastRadius = 1
                    end
                    if _G.UwpOptimize["Invisible Explosions"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Invisible Explosions"]) or (_G.UwpOptimize.Explosions and _G.UwpOptimize.Explosions.Invisible) then
                        Instance.BlastPressure = 1
                        Instance.BlastRadius = 1
                        Instance.Visible = false
                    end
                    if _G.UwpOptimize["No Explosions"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["No Explosions"]) or (_G.UwpOptimize.Explosions and _G.UwpOptimize.Explosions.Destroy) then
                        Instance:Destroy()
                    end
                elseif Instance:IsA("Clothing") or Instance:IsA("SurfaceAppearance") or Instance:IsA("BaseWrap") then
                    if _G.UwpOptimize["No Clothes"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["No Clothes"]) then
                        Instance:Destroy()
                    end
                elseif Instance:IsA("BasePart") and not Instance:IsA("MeshPart") then
                    if _G.UwpOptimize["Low Quality Parts"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Low Quality Parts"]) then
                        Instance.Material = Enum.Material.Plastic
                        Instance.Reflectance = 0
                    end
                elseif Instance:IsA("TextLabel") and Instance:IsDescendantOf(workspace) then
                    if _G.UwpOptimize["Lower Quality TextLabels"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Lower Quality TextLabels"]) or (_G.UwpOptimize.TextLabels and _G.UwpOptimize.TextLabels.LowerQuality) then
                        Instance.Font = Enum.Font.SourceSans
                        Instance.TextScaled = false
                        Instance.RichText = false
                        Instance.TextSize = 14
                    end
                    if _G.UwpOptimize["Invisible TextLabels"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Invisible TextLabels"]) or (_G.UwpOptimize.TextLabels and _G.UwpOptimize.TextLabels.Invisible) then
                        Instance.Visible = false
                    end
                    if _G.UwpOptimize["No TextLabels"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["No TextLabels"]) or (_G.UwpOptimize.TextLabels and _G.UwpOptimize.TextLabels.Destroy) then
                        Instance:Destroy()
                    end
                elseif Instance:IsA("Model") then
                    if _G.UwpOptimize["Low Quality Models"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Low Quality Models"]) then
                        Instance.LevelOfDetail = 1
                    end
                elseif Instance:IsA("MeshPart") then
                    if _G.UwpOptimize["Low Quality MeshParts"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Low Quality MeshParts"]) or (_G.UwpOptimize.MeshParts and _G.UwpOptimize.MeshParts.LowerQuality) then
                        Instance.RenderFidelity = 2
                        Instance.Reflectance = 0
                        Instance.Material = Enum.Material.Plastic
                    end
                    if _G.UwpOptimize["Invisible MeshParts"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Invisible MeshParts"]) or (_G.UwpOptimize.MeshParts and _G.UwpOptimize.MeshParts.Invisible) then
                        Instance.Transparency = 1
                        Instance.RenderFidelity = 2
                        Instance.Reflectance = 0
                        Instance.Material = Enum.Material.Plastic
                    end
                    if _G.UwpOptimize.MeshParts and _G.UwpOptimize.MeshParts.NoTexture then
                        Instance.TextureID = ""
                    end
                    if _G.UwpOptimize.MeshParts and _G.UwpOptimize.MeshParts.NoMesh then
                        Instance.MeshId = ""
                    end
                    if _G.UwpOptimize["No MeshParts"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["No MeshParts"]) or (_G.UwpOptimize.MeshParts and _G.UwpOptimize.MeshParts.Destroy) then
                        Instance:Destroy()
                    end
                end
            end
        end
        if _G.SendNotifications then
            StarterGui:SetCore("SendNotification", {
                Title = "discord.gg/rips",
                Text = "Loading FPS Booster...",
                Duration = math.huge,
                Button1 = "Okay"
            })
        end
        coroutine.wrap(pcall)(function()
            if (_G.UwpOptimize["Low Water Graphics"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Low Water Graphics"])) then
                if not workspace:FindFirstChildOfClass("Terrain") then
                    repeat
                        task.wait()
                    until workspace:FindFirstChildOfClass("Terrain")
                end
                workspace:FindFirstChildOfClass("Terrain").WaterWaveSize = 0
                workspace:FindFirstChildOfClass("Terrain").WaterWaveSpeed = 0
                workspace:FindFirstChildOfClass("Terrain").WaterReflectance = 0
                workspace:FindFirstChildOfClass("Terrain").WaterTransparency = 0
                if sethiddenproperty then
                    sethiddenproperty(workspace:FindFirstChildOfClass("Terrain"), "Decoration", false)
                else
                    StarterGui:SetCore("SendNotification", {
                        Title = "discord.gg/rips",
                        Text = "Your exploit does not support sethiddenproperty, please use a different exploit.",
                        Duration = 5,
                        Button1 = "Okay"
                    })
                    warn("Your exploit does not support sethiddenproperty, please use a different exploit.")
                end
                if _G.SendNotifications then
                    StarterGui:SetCore("SendNotification", {
                        Title = "discord.gg/rips",
                        Text = "Low Water Graphics Enabled",
                        Duration = 5,
                        Button1 = "Okay"
                    })
                end
                if _G.ConsoleLogs then
                    warn("Low Water Graphics Enabled")
                end
            end
        end)
        coroutine.wrap(pcall)(function()
            if _G.UwpOptimize["No Shadows"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["No Shadows"]) then
                Lighting.GlobalShadows = false
                Lighting.FogEnd = 9e9
                Lighting.ShadowSoftness = 0
                if sethiddenproperty then
                    sethiddenproperty(Lighting, "Technology", 2)
                else
                    StarterGui:SetCore("SendNotification", {
                        Title = "discord.gg/rips",
                        Text = "Your exploit does not support sethiddenproperty, please use a different exploit.",
                        Duration = 5,
                        Button1 = "Okay"
                    })
                    warn("Your exploit does not support sethiddenproperty, please use a different exploit.")
                end
                if _G.SendNotifications then
                    StarterGui:SetCore("SendNotification", {
                        Title = "discord.gg/rips",
                        Text = "No Shadows Enabled",
                        Duration = 5,
                        Button1 = "Okay"
                    })
                end
                if _G.ConsoleLogs then
                    warn("No Shadows Enabled")
                end
            end
        end)
        coroutine.wrap(pcall)(function()
            if _G.UwpOptimize["Low Rendering"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Low Rendering"]) then
                settings().Rendering.QualityLevel = 1
                settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level04
                if _G.SendNotifications then
                    StarterGui:SetCore("SendNotification", {
                        Title = "discord.gg/rips",
                        Text = "Low Rendering Enabled",
                        Duration = 5,
                        Button1 = "Okay"
                    })
                end
                if _G.ConsoleLogs then
                    warn("Low Rendering Enabled")
                end
            end
        end)
        coroutine.wrap(pcall)(function()
            if _G.UwpOptimize["Reset Materials"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["Reset Materials"]) then
                for i, v in pairs(MaterialService:GetChildren()) do
                    v:Destroy()
                end
                MaterialService.Use2022Materials = false
                if _G.SendNotifications then
                    StarterGui:SetCore("SendNotification", {
                        Title = "discord.gg/rips",
                        Text = "Reset Materials Enabled",
                        Duration = 5,
                        Button1 = "Okay"
                    })
                end
                if _G.ConsoleLogs then
                    warn("Reset Materials Enabled")
                end
            end
        end)
        coroutine.wrap(pcall)(function()
            if _G.UwpOptimize["FPS Cap"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["FPS Cap"]) then
                if setfpscap then
                    if type(_G.UwpOptimize["FPS Cap"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["FPS Cap"])) == "string" or type(_G.UwpOptimize["FPS Cap"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["FPS Cap"])) == "number" then
                        setfpscap(tonumber(_G.UwpOptimize["FPS Cap"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["FPS Cap"])))
                        if _G.SendNotifications then
                            StarterGui:SetCore("SendNotification", {
                                Title = "discord.gg/rips",
                                Text = "FPS Capped to " .. tostring(_G.UwpOptimize["FPS Cap"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["FPS Cap"])),
                                Duration = 5,
                                Button1 = "Okay"
                            })
                        end
                        if _G.ConsoleLogs then
                            warn("FPS Capped to " .. tostring(_G.UwpOptimize["FPS Cap"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["FPS Cap"])))
                        end
                    elseif _G.UwpOptimize["FPS Cap"] or (_G.UwpOptimize.Other and _G.UwpOptimize.Other["FPS Cap"]) == true then
                        setfpscap(1e6)
                        if _G.SendNotifications then
                            StarterGui:SetCore("SendNotification", {
                                Title = "discord.gg/rips",
                                Text = "FPS Uncapped",
                                Duration = 5,
                                Button1 = "Okay"
                            })
                        end
                        if _G.ConsoleLogs then
                            warn("FPS Uncapped")
                        end
                    end
                else
                    StarterGui:SetCore("SendNotification", {
                        Title = "discord.gg/rips",
                        Text = "FPS Cap Failed",
                        Duration = math.huge,
                        Button1 = "Okay"
                    })
                    warn("FPS Cap Failed")
                end
            end
        end)
        game.DescendantAdded:Connect(function(value)
            wait(_G.LoadedWait or 1)
            CheckIfBad(value)
        end)
        local Descendants = game:GetDescendants()
        local StartNumber = _G.WaitPerAmount or 500
        local WaitNumber = _G.WaitPerAmount or 500
        if _G.SendNotifications then
            StarterGui:SetCore("SendNotification", {
                Title = "discord.gg/rips",
                Text = "Checking " .. #Descendants .. " Instances...",
                Duration = 15,
                Button1 = "Okay"
            })
        end
        if _G.ConsoleLogs then
            warn("Checking " .. #Descendants .. " Instances...")
        end
        for i, v in pairs(Descendants) do
            CheckIfBad(v)
            if i == WaitNumber then
                task.wait()
                if _G.ConsoleLogs then
                    print("Loaded " .. i .. "/" .. #Descendants)
                end
                WaitNumber = WaitNumber + StartNumber
            end
        end
        --game.DescendantAdded:Connect(CheckIfBad)
        --[[game.DescendantAdded:Connect(function(value)
            CheckIfBad(value)
        end)]]
    end
})

Tab:AddButton({
    Title = "AntiLock",
    Description = "PC And Mobile",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Gwaporoblox/Sub-to-vascal/main/Vascal-antilock-button"))()
    end
})
